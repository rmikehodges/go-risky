package handlers

import (
	"go-risky/database"
	"log"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

type VulnerabilityInput struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	BusinessID  uuid.UUID `json:"businessId"`
	CreatedAt   time.Time `json:"createdAt"`
}

type VulnerabilityOutput struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	BusinessID  uuid.UUID `json:"businessId"`
	CreatedAt   time.Time `json:"createdAt"`
}

type VulnerabilityOutputs []VulnerabilityOutput

func (vulnerabilityInput VulnerabilityInput) inputToModel() (vulnerabilityModel database.VulnerabilityModel, err error) {
	//This is where you do input validation sanitization
	vulnerabilityModel.ID = vulnerabilityInput.ID
	vulnerabilityModel.Name = vulnerabilityInput.Name
	vulnerabilityModel.BusinessID = vulnerabilityInput.BusinessID
	vulnerabilityModel.CreatedAt = vulnerabilityInput.CreatedAt

	return

}

func (vulnerabilityOutput *VulnerabilityOutput) modelToOutput(vulnerabilityModel database.VulnerabilityModel) (err error) {
	//This is where you do input validation sanitization
	vulnerabilityOutput.ID = vulnerabilityModel.ID
	vulnerabilityOutput.Name = vulnerabilityModel.Name
	vulnerabilityOutput.BusinessID = vulnerabilityModel.BusinessID
	vulnerabilityOutput.CreatedAt = vulnerabilityModel.CreatedAt

	return
}

func vulnerabilityModelsToOutput(vulnerabilityModels []database.VulnerabilityModel) (vulnerabilityOutputs VulnerabilityOutputs, err error) {
	//This is where you do input validation sanitization
	for _, model := range vulnerabilityModels {
		vulnerabilityOutput := VulnerabilityOutput{}
		err := vulnerabilityOutput.modelToOutput(model)
		if err != nil {
			return nil, err
		}
		vulnerabilityOutputs = append(vulnerabilityOutputs, vulnerabilityOutput)
	}

	return
}

func (controller PublicController) GetVulnerabilities(context *gin.Context) {

	id, ok := context.GetQuery("businessId")
	if !ok {
		log.Println("Parameter businessId not found")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	businessId, err := uuid.Parse(id)
	if err != nil {
		log.Println("businessId is not a uuid")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	vulnerabilitymodel, err := controller.DBManager.GetVulnerabilities(businessId.String())

	if err != nil {
		log.Println(err)
		context.JSON(http.StatusNotFound, nil)
		return
	}
	vulnerabilityOutputs, err := vulnerabilityModelsToOutput(vulnerabilitymodel)

	if err != nil {
		context.JSON(http.StatusNotFound, vulnerabilityOutputs)
		return
	}

	context.JSON(http.StatusOK, vulnerabilityOutputs)
}

func (controller PublicController) GetVulnerability(context *gin.Context) {

	id, ok := context.GetQuery("id")
	if !ok {
		log.Println("Parameter id not found")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	vulnerabilityId, err := uuid.Parse(id)
	if err != nil {
		log.Println("ID is not a uuid")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	vulnerabilityModel, err := controller.DBManager.GetVulnerability(vulnerabilityId.String())

	if err != nil {
		log.Println(err)
		context.JSON(http.StatusNotFound, nil)
		return
	}

	var vulnerabilityOutput VulnerabilityOutput
	err = vulnerabilityOutput.modelToOutput(vulnerabilityModel)

	if err != nil {
		log.Println(err)
		context.JSON(http.StatusNotFound, vulnerabilityOutput)
		return
	}

	context.JSON(http.StatusOK, vulnerabilityOutput)
}

func (controller PublicController) DeleteVulnerability(context *gin.Context) {

	id, ok := context.GetQuery("id")
	if !ok {
		log.Println("Parameter id not found")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	vulnerabilityId, err := uuid.Parse(id)
	if err != nil {
		log.Println("ID is not a uuid")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	err = controller.DBManager.DeleteVulnerability(vulnerabilityId.String())

	if err != nil {
		log.Println("Received Error from Database")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	context.JSON(http.StatusOK, "Success")
}

func (controller PublicController) CreateVulnerability(context *gin.Context) {

	vulnerabilityInput := VulnerabilityInput{}
	err := context.ShouldBindJSON(&vulnerabilityInput)
	if err != nil {
		log.Println(err)
		context.IndentedJSON(http.StatusBadRequest, "Bad request")
	}
	vulnerabilityModel, err := vulnerabilityInput.inputToModel()
	if err != nil {
		log.Println(err)
		context.IndentedJSON(http.StatusNotFound, "Not Found")
		return
	}

	vulnerabilityId, err := controller.DBManager.CreateVulnerability(vulnerabilityModel)
	if err != nil {
		log.Println(err)
		context.IndentedJSON(http.StatusNotFound, "Not Found")
		return
	}

	context.IndentedJSON(http.StatusOK, vulnerabilityId)
}

func (controller PublicController) UpdateVulnerability(context *gin.Context) {

	vulnerabilityInput := VulnerabilityInput{}
	err := context.ShouldBindJSON(&vulnerabilityInput)
	if err != nil {
		log.Println(err)
		context.IndentedJSON(http.StatusBadRequest, "Bad request")
	}

	vulnerabilityModel, err := vulnerabilityInput.inputToModel()

	if err != nil {
		log.Println(err)
		context.IndentedJSON(http.StatusNotFound, "Not Found")
		return
	}

	err = controller.DBManager.UpdateVulnerability(vulnerabilityModel)
	if err != nil {
		log.Println(err)
		context.IndentedJSON(http.StatusNotFound, "Not Found")
		return
	}

	context.IndentedJSON(http.StatusOK, "Success")
}
