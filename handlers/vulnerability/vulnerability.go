package vulnerability

import (
	"go-risky/database"
	"log"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

type VulnerabilityInput struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	BusinessID  uuid.UUID `json:"businessId"`
	CreatedAt   time.Time `json:"createdAt"`
}

type VulnerabilityOutput struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	BusinessID  uuid.UUID `json:"businessId"`
	CreatedAt   time.Time `json:"createdAt"`
}

func inputToModel(vulnerabilityInput VulnerabilityInput) (vulnerabilityModel database.VulnerabilityModel, err error) {
	//This is where you do input validation sanitization
	vulnerabilityModel.ID = vulnerabilityInput.ID
	vulnerabilityModel.Name = vulnerabilityInput.Name
	vulnerabilityModel.BusinessID = vulnerabilityInput.BusinessID
	vulnerabilityModel.CreatedAt = vulnerabilityInput.CreatedAt

	return

}

func modelToOutput(vulnerabilityModel database.VulnerabilityModel) (vulnerabilityOutput VulnerabilityOutput, err error) {
	//This is where you do input validation sanitization
	vulnerabilityOutput.ID = vulnerabilityModel.ID
	vulnerabilityOutput.Name = vulnerabilityModel.Name
	vulnerabilityOutput.BusinessID = vulnerabilityModel.BusinessID
	vulnerabilityOutput.CreatedAt = vulnerabilityModel.CreatedAt

	return
}

func modelsToOutput(vulnerabilityModels []database.VulnerabilityModel) (vulnerabilityOutput []VulnerabilityOutput, err error) {
	//This is where you do input validation sanitization
	for _, model := range vulnerabilityModels {
		output, err := modelToOutput(model)
		if err != nil {
			return []VulnerabilityOutput{}, err
		}
		vulnerabilityOutput = append(vulnerabilityOutput, output)
	}

	return
}

func getVulnerabilities(context *gin.Context) {
	db := context.MustGet("DBManager").(*database.DBManager)

	id, ok := context.GetQuery("businessId")
	if !ok {
		log.Println("Parameter businessId not found")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	businessId, err := uuid.Parse(id)
	if err != nil {
		log.Println("businessId is not a uuid")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	vulnerabilitymodel, err := db.GetVulnerabilities(businessId.String())

	if err != nil {
		log.Println(err)
		context.JSON(http.StatusNotFound, vulnerabilitymodel)
		return
	}

	vulnerabilityOutput, err := modelsToOutput(vulnerabilitymodel)

	if err != nil {
		context.JSON(http.StatusNotFound, vulnerabilityOutput)
		return
	}

	context.JSON(http.StatusOK, vulnerabilityOutput)
}

func getVulnerability(context *gin.Context) {
	db := context.MustGet("DBManager").(*database.DBManager)

	id, ok := context.GetQuery("id")
	if !ok {
		log.Println("Parameter id not found")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	vulnerabilityId, err := uuid.Parse(id)
	if err != nil {
		log.Println("ID is not a uuid")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	vulnerabilityOutput, err := db.GetVulnerability(vulnerabilityId.String())

	if err != nil {
		log.Println(err)
		context.JSON(http.StatusNotFound, vulnerabilityOutput)
		return
	}

	context.JSON(http.StatusOK, vulnerabilityOutput)
}

func deleteVulnerability(context *gin.Context) {
	db := context.MustGet("DBManager").(*database.DBManager)

	id, ok := context.GetQuery("id")
	if !ok {
		log.Println("Parameter id not found")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	vulnerabilityId, err := uuid.Parse(id)
	if err != nil {
		log.Println("ID is not a uuid")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	err = db.DeleteVulnerability(vulnerabilityId.String())

	if err != nil {
		log.Println("Received Error from Database")
		context.JSON(http.StatusNotFound, "Not found")
		return
	}

	context.JSON(http.StatusOK, "Success")
}

func createVulnerability(context *gin.Context) {
	db := context.MustGet("DBManager").(*database.DBManager)

	vulnerabilityInput := VulnerabilityInput{}
	err := context.ShouldBindJSON(&vulnerabilityInput)
	if err != nil {
		log.Println(err)
		context.IndentedJSON(http.StatusBadRequest, "Bad request")
	}
	vulnerabilityModel, err := inputToModel(vulnerabilityInput)
	if err != nil {
		log.Println(err)
		context.IndentedJSON(http.StatusNotFound, "Not Found")
		return
	}

	err = db.CreateVulnerability(vulnerabilityModel)
	if err != nil {
		log.Println(err)
		context.IndentedJSON(http.StatusNotFound, "Not Found")
		return
	}

	context.IndentedJSON(http.StatusOK, "Success")
}

func updateVulnerability(context *gin.Context) {
	db := context.MustGet("DBManager").(*database.DBManager)

	vulnerabilityInput := VulnerabilityInput{}
	err := context.ShouldBindJSON(&vulnerabilityInput)
	if err != nil {
		log.Println(err)
		context.IndentedJSON(http.StatusBadRequest, "Bad request")
	}

	vulnerabilityModel, err := inputToModel(vulnerabilityInput)

	if err != nil {
		log.Println(err)
		context.IndentedJSON(http.StatusNotFound, "Not Found")
		return
	}

	err = db.UpdateVulnerability(vulnerabilityModel)
	if err != nil {
		log.Println(err)
		context.IndentedJSON(http.StatusNotFound, "Not Found")
		return
	}

	context.IndentedJSON(http.StatusOK, "Success")
}

func VulnerabilityRoutes(router *gin.Engine) {
	router.GET("/vulnerabilities", getVulnerabilities)
	router.GET("/vulnerability/:id", getVulnerability)
	router.DELETE("/vulnerability/:id", deleteVulnerability)
	router.PATCH("/vulnerability/:id", updateVulnerability)
	router.POST("/vulnerabilities", createVulnerability)
}
