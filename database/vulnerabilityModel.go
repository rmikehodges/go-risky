package database

import (
	"context"
	"go-risky/types"
	"log"

	"github.com/jackc/pgx/v5"
)

func (m *DBManager) GetVulnerabilities(businessID string) (vulnerabilityOutput types.Vulnerabilities, err error) {

	rows, err := m.DBPool.Query(context.Background(), "SELECT * FROM risky_public.vulnerability WHERE business_id = $1;", businessID)
	if err != nil {
		log.Println(err)
		return
	}

	vulnerabilityOutput, err = pgx.CollectRows(rows, pgx.RowToStructByName[types.Vulnerability])
	if err != nil {
		log.Println(err)
		return
	}

	return
}

func (m *DBManager) GetVulnerability(id string) (vulnerabilityOutput types.Vulnerability, err error) {

	rows, err := m.DBPool.Query(context.Background(), "SELECT * FROM risky_public.vulnerability WHERE id = $1;", id)
	if err != nil {
		log.Println(err)
		return
	}

	vulnerabilityOutput, err = pgx.CollectOneRow(rows, pgx.RowToStructByName[types.Vulnerability])
	if err != nil {
		log.Println(err)
		return
	}

	return
}

func (m *DBManager) DeleteVulnerability(id string) (err error) {

	_, err = m.DBPool.Exec(context.Background(), "DELETE FROM risky_public.vulnerability WHERE id = $1;", id)
	if err != nil {
		log.Println(err)
		return
	}

	return
}

func (m *DBManager) CreateVulnerability(vulnerabilityInput types.Vulnerability) (vulnerabilityId string, err error) {

	err = m.DBPool.QueryRow(context.Background(),
		`INSERT INTO risky_public.vulnerability(name, description, business_id) values($1, $2, $3) RETURNING id;`,
		vulnerabilityInput.Name,
		vulnerabilityInput.Description,
		vulnerabilityInput.BusinessID).Scan(&vulnerabilityId)
	if err != nil {
		log.Println(err)
		return
	}

	return
}

func (m *DBManager) UpdateVulnerability(vulnerabilityInput types.Vulnerability) (err error) {

	_, err = m.DBPool.Exec(context.Background(),
		`UPDATE risky_public.vulnerability SET name = $2, description = $3, business_id = $4 WHERE id = $1;`,
		vulnerabilityInput.ID,
		vulnerabilityInput.Name,
		vulnerabilityInput.Description,
		vulnerabilityInput.BusinessID)
	if err != nil {
		log.Println(err)
		return
	}

	return
}
