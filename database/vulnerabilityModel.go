package database

import (
	"context"
	"log"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype/zeronull"
)

type VulnerabilityModel struct {
	ID          uuid.UUID     `json:"id"`
	Name        string        `json:"name"`
	Description zeronull.Text `json:"description"`
	BusinessID  uuid.UUID     `json:"businessId" db:"business_id"`
	CreatedAt   time.Time     `json:"createdAt" db:"created_at"`
}

func (m *DBManager) GetVulnerabilities(businessID string) (vulnerabilityOutput []VulnerabilityModel, err error) {

	rows, err := m.dbPool.Query(context.Background(), "select id,name, description, business_id,created_at FROM risky_public.vulnerabilitys(fn_business_id => $1)", businessID)
	if err != nil {
		log.Println(err)
		return
	}

	vulnerabilityOutput, err = pgx.CollectRows(rows, pgx.RowToStructByName[VulnerabilityModel])
	if err != nil {
		log.Println(err)
		return
	}

	return
}

func (m *DBManager) GetVulnerability(id string) (vulnerabilityOutput VulnerabilityModel, err error) {

	rows, err := m.dbPool.Query(context.Background(), "select id,name, description,business_id, created_at FROM risky_public.get_vulnerability(fn_vulnerability_id => $1)", id)
	if err != nil {
		log.Println(err)
		return
	}

	vulnerabilityOutput, err = pgx.CollectOneRow(rows, pgx.RowToStructByName[VulnerabilityModel])
	if err != nil {
		log.Println(err)
		return
	}

	return
}

func (m *DBManager) DeleteVulnerability(id string) (err error) {

	_, err = m.dbPool.Query(context.Background(), "select risky_public.delete_vulnerability(fn_vulnerability_id => $1)", id)
	if err != nil {
		log.Println(err)
		return
	}

	return
}

func (m *DBManager) CreateVulnerability(vulnerabilityInput VulnerabilityModel) (err error) {

	_, err = m.dbPool.Query(context.Background(),
		`select risky_public.create_vulnerability(
			fn_name => $1, 
			fn_description => $2, 
			fn_business_id => $3)`,
		vulnerabilityInput.Name,
		vulnerabilityInput.Description,
		vulnerabilityInput.BusinessID)
	if err != nil {
		log.Println(err)
		return
	}

	return
}

func (m *DBManager) UpdateVulnerability(vulnerabilityInput VulnerabilityModel) (err error) {

	_, err = m.dbPool.Query(context.Background(),
		`select risky_public.update_vulnerability(
			fn_vulnerability_id => $1
			fn_name => $2, 
			fn_description => $3
			fn_business_id => $4)`,
		vulnerabilityInput.ID,
		vulnerabilityInput.Name,
		vulnerabilityInput.Description,
		vulnerabilityInput.BusinessID)
	if err != nil {
		log.Println(err)
		return
	}

	return
}
