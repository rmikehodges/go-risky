package database

import (
	"context"
	"go-risky/types"
	"log"

	"github.com/jackc/pgx/v5"
)

func (m *DBManager) GetVulnerabilities(businessID string) (vulnerabilityOutput types.Vulnerabilities, err error) {

	rows, err := m.DBPool.Query(context.Background(), "select id,name, description, business_id,created_at FROM risky_public.vulnerabilities(fn_business_id => $1)", businessID)
	if err != nil {
		log.Println(err)
		return
	}

	vulnerabilityOutput, err = pgx.CollectRows(rows, pgx.RowToStructByName[types.Vulnerability])
	if err != nil {
		log.Println(err)
		return
	}

	return
}

func (m *DBManager) GetVulnerability(id string) (vulnerabilityOutput types.Vulnerability, err error) {

	rows, err := m.DBPool.Query(context.Background(), "select id,name, description,business_id, created_at FROM risky_public.get_vulnerability(fn_vulnerability_id => $1)", id)
	if err != nil {
		log.Println(err)
		return
	}

	vulnerabilityOutput, err = pgx.CollectOneRow(rows, pgx.RowToStructByName[types.Vulnerability])
	if err != nil {
		log.Println(err)
		return
	}

	return
}

func (m *DBManager) DeleteVulnerability(id string) (err error) {

	_, err = m.DBPool.Exec(context.Background(), "select risky_public.delete_vulnerability(fn_vulnerability_id => $1)", id)
	if err != nil {
		log.Println(err)
		return
	}

	return
}

func (m *DBManager) CreateVulnerability(vulnerabilityInput types.Vulnerability) (vulnerabilityId string, err error) {

	err = m.DBPool.QueryRow(context.Background(),
		`select risky_public.create_vulnerability(
			fn_name => $1, 
			fn_description => $2, 
			fn_business_id => $3)`,
		vulnerabilityInput.Name,
		vulnerabilityInput.Description,
		vulnerabilityInput.BusinessID).Scan(&vulnerabilityId)
	if err != nil {
		log.Println(err)
		return
	}

	return
}

func (m *DBManager) UpdateVulnerability(vulnerabilityInput types.Vulnerability) (err error) {

	_, err = m.DBPool.Exec(context.Background(),
		`select risky_public.update_vulnerability(
			fn_vulnerability_id => $1,
			fn_name => $2, 
			fn_description => $3,
			fn_business_id => $4)`,
		vulnerabilityInput.ID,
		vulnerabilityInput.Name,
		vulnerabilityInput.Description,
		vulnerabilityInput.BusinessID)
	if err != nil {
		log.Println(err)
		return
	}

	return
}
